---
import Carousel from "../components/Carousel.astro";
import { ARROWS } from "../data/arrows";
import type { LinkType } from "../data/link_types";
import { LINK_TYPES } from "../data/link_types";

const arrows = ARROWS.map(e => ({
    link: `/arrows/entities/${e.slug}.png`
}));

interface Link {
    type: LinkType,
    url: string
}

const links: Link[] = [
    {
        type: "curseforge",
        url: "https://www.curseforge.com/minecraft/mc-mods/qfs-extra-resources"
    },
    {
        type: 'modthrint',
        url: "https://modrinth.com/"
    },
    {
        type: 'github',
        url: "https://github.com/ChristianDuarteL"
    }
]
---

<div class="flex flex-col items-center justify-center min-h-[150vh] min-w-full">
    <div class="sticky h-[100vh] top-0 w-full max-w-[calc(100%-2rem)] flex flex-col items-end justify-center gap-[15vh] overflow-visible">
        {arrows.map((e, i) => <img class="relative w-[125px]" data-arrow={i} src={e.link} />)}
    </div>
    <div class="w-full mt-[-50vh] flex bg-white/20 backdrop-blur-sm items-center justify-center min-h-screen z-10 gap-6" id="arrows">
        <div class="flex w-[980px] max-w-[calc(100%-4rem)] flex-col sm:flex-row">
            <div class="flex-col flex-1 flex justify-center">
                <header class="flex flex-col flex-wrap items-start mb-2">
                    <h1 class="text-3xl">Basically arrows</h1>
                    <span class="bg-indigo-200 text-black/70 font-semibold py-1 px-2 rounded-full inline text-sm">MOD</span>
                </header>
                <p class="text-lg text-balance">From seeking arrows to pacify arrows, this mod adds a lot of new arrows for you to be the best archer of all Minecraft.</p>
                <div class="mt-10 flex gap-3">
                    {links.map(link => <a href={link.url} target="_blank" class="text-4xl inline-block opacity-60 transform hover:opacity-100 hover:scale-125 motion-safe:transition motion-reduce:any-hover:scale-100]" style={{color: LINK_TYPES[link.type].color}}>
                        <svg viewBox={LINK_TYPES[link.type].icon.viewbox} width="1em" height="1em">
                            {LINK_TYPES[link.type].icon.paths.map(pathObj => <path fill="currentColor" clip-rule={pathObj.clipRule} fill-rule={pathObj.fillRule} d={pathObj.path}></path>)}
                        </svg>
                    </a>)}
                </div>
            </div>
            <div class="md:flex-1 flex flex-col items-center max-w-full sm:min-h-[80vh] justify-start">
                <div class="flex flex-col items-center w-full gap-5">
                    <Carousel class="w-64 sm:w-72 sm:mt-10 md:mt-0 md:w-96 aspect-square" elements={ARROWS.map(e => ({name: e.name, url: `/arrows/entities/${e.slug}.png`, pagination_url: `/arrows/items/${e.slug}.png`}))} imgClasses="-rotate-45 arrow-shadow max-w-[min(380px,100%)]"></Carousel>
                    <div class="sm:max-w-[min(24rem,40vw)] max-w-96 flex text-center items-center flex-col gap-2">
                        <h1 class="text-2xl">Heart arrow</h1>
                        <p class="text-balance">Valentine's day themed, the heart arrow shows heart particles to the entities it hits, so you can go spreading love out to the world.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    import { gsap } from "gsap";
    document.querySelectorAll('[data-arrow]').forEach(e => {
        gsap.to(e, {
            ease: 'none',
            scrollTrigger: {
                trigger: e,
                start: "center 60%",
                end: "center 40%",
                //toggleActions: 'restart pause reverse pause',
                scrub: true, 
                //markers: true
            },
            x: 400, 
            opacity: 1,
            duration: 3
        })
    })
</script>

<style is:global>
    img.arrow-shadow{
        --drop-shadow-color: #000a;
        filter: drop-shadow(var(--drop-shadow-color) 2px 2px 3px);
    }
</style>

<style>
    img{
        opacity: 0;
        --drop-shadow-color: #000a;
        filter: drop-shadow(var(--drop-shadow-color) 2px 2px 3px);
        image-rendering: pixelated;
        right: 400px;
    }
</style>